name: Deploy Specific Container to Production

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (e.g., frontend, ai-quiz, quiz-session, file-manager, quiz-database and gateway, eureka)'
        required: true
        default: frontend

jobs:
  deploy-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image for ${{ github.event.inputs.service }}
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          case "$SERVICE" in
            frontend)
              docker build -f frontend/Dockerfile -t simon1999/50fragen:frontend frontend
              docker push simon1999/50fragen:frontend
              ;;
            ai-quiz)
              docker build -f ai-quiz/Dockerfile -t simon1999/50fragen:ai-quiz ai-quiz
              docker push simon1999/50fragen:ai-quiz
              ;;
            quiz-session)
              docker build -f quiz-session/Dockerfile -t simon1999/50fragen:quiz-session quiz-session
              docker push simon1999/50fragen:quiz-session
              ;;
            file-manager)
              docker build -f file-manager/Dockerfile -t simon1999/50fragen:file-manager file-manager
              docker push simon1999/50fragen:file-manager
              ;;
            quiz-database)
              docker build -f quiz-database/Dockerfile -t simon1999/50fragen:quiz-database quiz-database
              docker push simon1999/50fragen:quiz-database
              ;;
            eureka)
              docker build -f eureka/Dockerfile -t simon1999/50fragen:eureka eureka
              docker push simon1999/50fragen:eureka
              ;;
            gateway)
              docker build -f gateway/Dockerfile -t simon1999/50fragen:gateway gateway
              docker push simon1999/50fragen:gateway
              ;;
            *)
              echo "Service '$SERVICE' is not supported"
              exit 1
              ;;
          esac

      - name: Update production service via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PROD_SERVER_ADDRESS }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          script: |
            set -e
            SERVICE="${{ github.event.inputs.service }}"
            COMPOSE_FILE="/${{ secrets.PROD_SERVER_USER }}/docker-compose.prod.yml"

            if [ "$SERVICE" = "gateway" ] || [ "$SERVICE" = "eureka" ]; then
              echo "WARNING: Updating ${SERVICE} will result in downtime. Restarting container instead."
              docker-compose -f $COMPOSE_FILE pull ${SERVICE}
              docker-compose -f $COMPOSE_FILE restart ${SERVICE}
            else
              echo "Deploying ${SERVICE} update with Blue/Green strategy via scaling"

              # Pull the updated image
              docker-compose -f $COMPOSE_FILE pull ${SERVICE}

              echo "Scaling ${SERVICE} to 2 instances"
              docker-compose -f $COMPOSE_FILE up -d --no-deps --scale ${SERVICE}=2 ${SERVICE}

              # Identify the new container based on the creation time
              ids=$(docker-compose -f $COMPOSE_FILE ps -q ${SERVICE})
              echo "Detected container IDs for ${SERVICE}: $ids"

              new_container=""
              latest_time=0
              for id in $ids; do
                create_time=$(docker inspect --format='{{.Created}}' $id)
                epoch=$(date -d "$create_time" +%s)
                if [ $epoch -gt $latest_time ]; then
                  latest_time=$epoch
                  new_container=$id
                fi
              done

              if [ -z "$new_container" ]; then
                echo "No new container found for ${SERVICE}"
                exit 1
              fi

              echo "New container for ${SERVICE} is $new_container. Starting health check..."

              max_attempts=30
              attempt=1

              while [ $attempt -le $max_attempts ]; do
                status=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}running{{end}}' $new_container)
                echo "Health status of new container ($new_container): $status"
                if [ "$status" = "healthy" ] || [ "$status" = "running" ]; then
                  echo "New container is healthy."
                  break
                fi
                echo "Waiting for new container to be healthy ($attempt/$max_attempts)..."
                sleep 2
                attempt=$((attempt + 1))
              done

              if [ $attempt -gt $max_attempts ]; then
                echo "Timeout reached: New container for ${SERVICE} is still not healthy."
                docker logs $new_container
                exit 1
              fi

              echo "New container is healthy. Scaling ${SERVICE} down to 1 instance (removing the old container)."
              docker-compose -f $COMPOSE_FILE up -d --no-deps --scale ${SERVICE}=1 ${SERVICE}
            fi