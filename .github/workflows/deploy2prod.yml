name: Deploy Specific Container to Production

on:
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (e.g., frontend, ai-quiz, quiz-session, file-manager)'
        required: true
        default: frontend
      new_port:
        description: 'Temporary host port for the new container instance (if required)'
        required: false

jobs:
  deploy-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image for ${{ github.event.inputs.service }}
        run: |
          SERVICE="${{ github.event.inputs.service }}"
          case "$SERVICE" in
            frontend)
              docker build -f frontend/Dockerfile -t simon1999/50fragen:frontend frontend
              docker push simon1999/50fragen:frontend
              ;;
            ai-quiz)
              docker build -f ai-quiz/Dockerfile -t simon1999/50fragen:ai-quiz ai-quiz
              docker push simon1999/50fragen:ai-quiz
              ;;
            quiz-session)
              docker build -f quiz-session/Dockerfile -t simon1999/50fragen:quiz-sessionquiz-session
              docker push simon1999/50fragen:quiz-session
              ;;
            file-manager)
              docker build -f file-manager/Dockerfile -t simon1999/50fragen:file-manager file-manager
              docker push simon1999/50fragen:file-manager
              ;;
            eureka)
              docker build -f eureka/Dockerfile -t simon1999/50fragen:eureka eureka
              docker push simon1999/50fragen:eureka
              ;;
            gateway)
              docker build -f gateway/Dockerfile -t simon1999/50fragen:gateway gateway
              docker push simon1999/50fragen:gateway
              ;;
            *)
              echo "Service '$SERVICE' is not supported"
              exit 1
              ;;
          esac

      - name: Update production service via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.PROD_SERVER_ADDRESS }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          script: |
            set -e
            SERVICE="${{ github.event.inputs.service }}"
            NEW_PORT="${{ github.event.inputs.new_port }}"

            # Map variables based on the selected service
            case "$SERVICE" in
              frontend)
                IMAGE="simon1999/50fragen:frontend"
                CURRENT_CONTAINER="frontend"
                NEW_CONTAINER="frontend-new"
                # Use a default container port (can be overridden by environment variable on the host)
                CONTAINER_PORT="${FRONTEND_CONTAINER_PORT:-8081}"
                ;;
              ai-quiz)
                IMAGE="simon1999/50fragen:ai-quiz"
                CURRENT_CONTAINER="ai-quiz"
                NEW_CONTAINER="ai-quiz-new"
                CONTAINER_PORT="${AI_CONTAINER_PORT:-4001}"
                ;;
              quiz-session)
                IMAGE="simon1999/50fragen:quiz-session"
                CURRENT_CONTAINER="quiz-session"
                NEW_CONTAINER="quiz-session-new"
                CONTAINER_PORT="${SESSION_CONTAINER_PORT:-4000}"
                ;;
              file-manager)
                IMAGE="simon1999/50fragen:file-manager"
                CURRENT_CONTAINER="file-manager"
                NEW_CONTAINER="file-manager-new"
                CONTAINER_PORT="${FILE_CONTAINER_PORT:-4002}"
                ;;
                eureka)
                IMAGE="simon1999/50fragen:eureka"
                CURRENT_CONTAINER="eureka"
                NEW_CONTAINER="eureka-new"
              *)
                echo "Service '$SERVICE' is not supported"
                exit 1
                ;;
            esac

            # Set up port mapping if NEW_PORT is provided
            if [ -n "$NEW_PORT" ]; then
              PORT_MAPPING="-p ${NEW_PORT}:${CONTAINER_PORT}"
            else
              # Otherwise, simply expose the container port as needed
              PORT_MAPPING="--expose ${CONTAINER_PORT}"
            fi

            echo "Deploying $SERVICE with image $IMAGE using mapping: $PORT_MAPPING"
            
            # Run the new container in detached mode
            docker run -d --name ${NEW_CONTAINER} ${PORT_MAPPING} ${IMAGE}

            # Wait for the new container to be healthy (up to ~60 seconds)
            ready=0
            for i in {1..30}; do
              status=$(docker inspect --format='{{if .State.Health}}{{.State.Health.Status}}{{else}}running{{end}}' ${NEW_CONTAINER} 2>/dev/null || echo "starting")
              echo "Health check status for '$NEW_CONTAINER': $status"
              if [[ "$status" == "healthy" || "$status" == "running" ]]; then
                ready=1
                break
              fi
              sleep 2
            done

            if [ $ready -eq 1 ]; then
              echo "New $SERVICE container is healthy; switching traffic..."
            
              # (Optional: update your reverse proxy/load-balancer settings here if needed)
            
              # Stop and remove the old container, then rename the new container to its name.
              docker stop ${CURRENT_CONTAINER} || true
              docker rm ${CURRENT_CONTAINER} || true
              docker rename ${NEW_CONTAINER} ${CURRENT_CONTAINER}
            else
              echo "Error: The new $SERVICE container did not become healthy in time."
              docker logs ${NEW_CONTAINER}
              exit 1
            fi